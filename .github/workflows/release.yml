name: Release

on:
  workflow_call:
    outputs:
      status:
        description: "The status of the release"
        value: ${{ jobs.release.outputs.status }}
      version:
        description: "The version that was released"
        value: ${{ jobs.release.outputs.version }}

jobs:
  release:
    runs-on: ubuntu-latest
    if: endsWith(github.head_ref, 'pre-release') && github.event.pull_request.merged == true
    outputs:
      status: ${{ steps.status-check.outputs.status }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Locate pre-release branch
        id: branch_name
        run: |
          git config user.name ${{ github.actor	}}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git fetch
          BRANCH_NAME=$(git branch -a | grep "pre-release")
          BRANCH=${BRANCH_NAME##*/}
          echo $BRANCH
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

      - name: Locate version by pre-release branch
        id: version
        run: |
          echo "${{ env.BRANCH }}"
          echo "RELEASE_VERSION=$( echo ${{ env.BRANCH }} | cut -d "-" -f 1 )" >> $GITHUB_ENV
          echo ${{ env.RELEASE_VERSION }}
          echo "version=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0
          submodules: true
          persist-credentials: false

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip" # caching pip dependencies

      - name: Check out release helper code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.action_repository }}
          path: "$GITHUB_WORKSPACE/release_helpers"
          persist-credentials: false

      - name: Install release helpers python dependencies
        run: |
          pip install --upgrade pip && pip install -r $GITHUB_WORKSPACE/release_helpers/requirements.txt

      - name: Extract release changelog
        run: |
          mdsplit CHANGELOG.md --max-level 2 -o releaseJournal
          RELEASE_CHANGES=$(find releaseJournal -name '*${{ env.RELEASE_VERSION }}*')
          echo "RELEASE_CHANGES=${RELEASE_CHANGES}" >> $GITHUB_ENV

      - name: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_VERSION }}
          bodyFile: ${{ env.RELEASE_CHANGES }}
          commit: ${{ env.BRANCH }}
          persist-credentials: false

      - name: Delete pre-release branch
        run: git push -d origin ${{ env.BRANCH }}

      - name: check status
        if: always()
        id: status-check
        run: |
          echo "status=${{ job.status }}" >> $GITHUB_ENV
