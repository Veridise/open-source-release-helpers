name: Create Release PR

on:
  workflow_call:

jobs:
  create-release-files:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release_version.outputs.version }}
      branch: ${{ steps.branch_name.outputs.name }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Locate pre-release branch
        id: branch_name
        run: |
          git config user.name ${{ github.actor	}}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git fetch
          BRANCH_NAME=$(git branch -a | grep "pre-release")
          BRANCH=${BRANCH_NAME##*/}
          echo $BRANCH
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "name=$BRANCH" >> $GITHUB_OUTPUT

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          persist-credentials: false

      - name: Check out release helper code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.action_repository }}
          path: "$GITHUB_WORKSPACE/release_helpers"
          persist-credentials: false

      - name: Locate release version
        id: release_version
        run: |
          echo "RELEASE_VERSION=$( echo ${{ env.BRANCH }} | cut -d "-" -f 1 )" >> $GITHUB_ENV
          RELEASE_VERSION=$( echo ${{ env.BRANCH }} | cut -d "-" -f 1 )
          echo "Release version '${RELEASE_VERSION}'"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip" # caching pip dependencies

      - name: Install python dependencies
        run: |
          pip install --upgrade pip && pip install -r $GITHUB_WORKSPACE/release_helpers/requirements.txt

      - name: Update date & append to top of Changelog.md
        run: |
          $GITHUB_WORKSPACE//release_helpers/scripts/prependReleaseChanges.sh
          $GITHUB_WORKSPACE//release_helpers/scripts/removePreReleaseFiles.sh
          ls -lR changelogs

      - name: Commit changes
        id: commit
        run: |
          git commit -am "Finalize release ${{ env.RELEASE_VERSION }}"
          git push

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: 'Release ${{ env.RELEASE_VERSION }}',
              owner,
              repo,
              head: '${{ env.BRANCH }}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['release', '${{ env.RELEASE_VERSION }}']
            });

      - name: Auto approve PR
        run: |
          # give a few seconds for the PR to be available on listing
          sleep 5
          # the PR is labeled with "release" and the release number. Search using the labels
          PR_NUMBER=$(gh pr list --label "release" --label ${{ env.RELEASE_VERSION }} | cut -f 1)
          if [ -z "${PR_NUMBER}" ]; then
            echo "Could not locate the PR number to auto approve. Exiting.."
            exit 1
          fi
          gh pr list --label "release" --label ${{ env.RELEASE_VERSION }}
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
          echo "Release PR: ${PR_NUMBER}"
          gh pr review --approve ${PR_NUMBER}

      - name: Wait for required checks to complete
        run: |
          # by default github actions have set -e. But the gh pr check exits with 1 if there are no checks
          set +e
          gh pr checks --watch --fail-fast --required ${{ env.PR_NUMBER }} 2>error.txt
          exit_code=$?
          set -e
          echo "*** ERROR OUTPUT ***"
          cat error.txt
          echo "********************"
          if [ $exit_code -ne 0 ]
          then
            error_text=$(cat error.txt)
            if [[ ! "$error_text" == *"no required checks reported"* ]]; then
              exit $exit_code
            fi
          fi

      - name: Merge PR
        run: |
          gh pr merge ${{ env.PR_NUMBER }} --merge
